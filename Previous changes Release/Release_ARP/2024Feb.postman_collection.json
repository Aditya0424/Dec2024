{
	"info": {
		"_postman_id": "91e02f7a-8903-4579-bd0e-39c720b8780c",
		"name": "2024Feb",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15821309",
		"_collection_link": "https://interstellar-comet-883543.postman.co/workspace/7576195d-61cf-48a7-9633-a53c8990d524/collection/15821309-91e02f7a-8903-4579-bd0e-39c720b8780c?action=share&source=collection_link&creator=15821309"
	},
	"item": [
		{
			"name": "via DD",
			"item": [
				{
					"name": "addBook-DD",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randInt= pm.variables.replaceIn('{{$randomInt}}')\r",
									"const isbn= 'AD'+randInt\r",
									"//console.log(\"Pre-Req step: \"+ isbn)\r",
									"\r",
									"pm.collectionVariables.set(\"isbn\", isbn)\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema= {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"Msg\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"ID\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"Msg\",\r",
									"    \"ID\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"var resp= pm.response.json()\r",
									"\r",
									"\r",
									"pm.test(\"TC01 Check Response Status\"), function(){\r",
									"    pm.response.to.have.status(200)\r",
									"}\r",
									"\r",
									"pm.test(\"TC02 Check Response Header\"), function(){\r",
									"    pm.response.to.have.header(content-type)\r",
									"}\r",
									"pm.test(\"TC03 Check Response schema\"), function(){\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"}\r",
									"\r",
									"pm.test(\"TC04 Check Response time\"), function(){\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500)\r",
									"}\r",
									"\r",
									"pm.test(\"TC05 Check response include\"), function(){\r",
									"    pm.expect(pm.response.body).to.include(pm.collectionVariables.get(\"isbn\"))\r",
									"    }\r",
									"\r",
									"pm.test(\"TC06 Check response to not include\"), function(){\r",
									"    pm.expect(pm.response.body).to.not.include(\"already exists\")\r",
									"}\r",
									"\r",
									"pm.test(\"TC07 Check value\"), function(){\r",
									"    pm.expect(resp.Msg).to.equal(\"successfully added\")\r",
									"}\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"id\", resp.ID)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n\"name\":\"{{name}}\",\r\n\"isbn\":\"{{isbn}}\",\r\n\"aisle\":\"{{aisle}}\",\r\n\"author\":\"{{author}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/Library/Addbook.php",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"Library",
								"Addbook.php"
							]
						}
					},
					"response": []
				},
				{
					"name": "getBook-DD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var getSchema = {\r",
									"    'type': 'array',\r",
									"    'items': [{\r",
									"        'type': 'object',\r",
									"        'properties': {\r",
									"            'book_name': { 'type': 'string' },\r",
									"            'isbn': { 'type': 'string' },\r",
									"            'aisle': { 'type': 'string' },\r",
									"            'author': { 'type': 'string' }\r",
									"        },\r",
									"        'required': [\r",
									"            'book_name',\r",
									"            'isbn',\r",
									"            'aisle',\r",
									"            'author'\r",
									"        ]\r",
									"    }]\r",
									"};\r",
									"\r",
									"var getRes = pm.response.json();\r",
									"\r",
									"pm.test('TC01 Check Response status', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('TC02 Check Response headers', function () {\r",
									"    pm.response.to.have.header('content-type');\r",
									"});\r",
									"\r",
									"pm.test('TC03 Check schema', function () {\r",
									"    pm.response.to.have.jsonSchema(getSchema);\r",
									"});\r",
									"\r",
									"pm.test('TC04 Check Response time', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"TC05 Check Response to include\", function(){\r",
									"    pm.expect(getRes[0].isbn).to.equal(pm.collectionVariables.get(\"isbn\"));\r",
									"});\r",
									"\r",
									"pm.test(\"TC06 Check Response to include\", function(){\r",
									"    pm.expect(getRes[0]).to.have.property(\"book_name\");\r",
									"    pm.expect(getRes[0]).to.have.property(\"isbn\");\r",
									"    pm.expect(getRes[0]).to.have.property(\"aisle\");\r",
									"    pm.expect(getRes[0]).to.have.property(\"author\");\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"TC07 Check Response values\", function(){\r",
									"    pm.expect(getRes[0].book_name).to.equal(data.name);\r",
									"    pm.expect(getRes[0].isbn).to.include(pm.collectionVariables.get(\"isbn\"));\r",
									"    //pm.expect(getRes[0].aisle).to.equal(data.aisle);\r",
									"    pm.expect(getRes[0].author).to.equal(data.author);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/Library/GetBook.php?ID={{id}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"Library",
								"GetBook.php"
							],
							"query": [
								{
									"key": "ID",
									"value": "{{id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "addBook",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const randInt= pm.variables.replaceIn('{{$randomInt}}')\r",
							"const isbn= 'AD'+randInt\r",
							"console.log(\"Pre-Req step: \"+ isbn)\r",
							"\r",
							"pm.collectionVariables.set(\"isbn\", isbn)\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var schema = {\r",
							"    'type': 'object',\r",
							"    'properties': {\r",
							"        'Msg': { 'type': 'string' },\r",
							"        'ID': { 'type': 'string' }\r",
							"    },\r",
							"    'required': [\r",
							"        'Msg',\r",
							"        'ID'\r",
							"    ]\r",
							"};\r",
							"\r",
							"var responseJSON = pm.response.json();\r",
							"\r",
							"pm.test('TC01 Check Response status', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"TC01_01 - response is not error\", function(){\r",
							"pm.response.to.not.be.error;\r",
							"})\r",
							"\r",
							"pm.test('TC02 Header is present', function () {\r",
							"    pm.response.to.have.header('Content-Type');\r",
							"})\r",
							"\r",
							"pm.test('TC03 Check schema', function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"})\r",
							"\r",
							"pm.test('TC04 Check Response Time', function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1200);\r",
							"})\r",
							"\r",
							"pm.test('TC05 Check field value', function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"isbn\"));\r",
							"})\r",
							"\r",
							"pm.test('TC06 Check field value', function () {\r",
							"    pm.expect(pm.response.text()).to.not.include('book already exists');\r",
							"})\r",
							"\r",
							"pm.test('TC07 Check schema option 2', function () {\r",
							"    pm.expect(responseJSON).to.have.property(\"ID\");\r",
							"    pm.expect(responseJSON).to.have.property(\"Msg\");\r",
							"})\r",
							"\r",
							"pm.test('TC08 Check field value', function () {\r",
							"    pm.expect(responseJSON.Msg).to.equal('successfully added');\r",
							"})\r",
							"\r",
							"pm.test('TC09 Check value properties', function () {\r",
							"    pm.expect(responseJSON.ID).to.be.a('string');\r",
							"    pm.expect(responseJSON.ID).to.have.length(8);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\r\n\"name\":\"Test Book 1\",\r\n\"isbn\":\"{{isbn}}\",\r\n\"aisle\":\"101\",\r\n\"author\":\"Adi S\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/Library/Addbook.php",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"Library",
						"Addbook.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "getBook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.aisle).to.eql(227);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/Library/GetBook.php?ID=adtest1227",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"Library",
						"GetBook.php"
					],
					"query": [
						{
							"key": "ID",
							"value": "adtest1227"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "isbn",
			"value": "",
			"type": "string"
		},
		{
			"key": "id",
			"value": "",
			"type": "string"
		}
	]
}